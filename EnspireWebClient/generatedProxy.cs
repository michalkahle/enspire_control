//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EnSpireAssayInterface
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StackerState", Namespace="http://schemas.datacontract.org/2004/07/EnSpireAssayInterface")]
    public partial class StackerState : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private short FrameInstalledField;
        
        private short LeftStackInstalledField;
        
        private short RightStackInstalledField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short FrameInstalled
        {
            get
            {
                return this.FrameInstalledField;
            }
            set
            {
                this.FrameInstalledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short LeftStackInstalled
        {
            get
            {
                return this.LeftStackInstalledField;
            }
            set
            {
                this.LeftStackInstalledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short RightStackInstalled
        {
            get
            {
                return this.RightStackInstalledField;
            }
            set
            {
                this.RightStackInstalledField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Assay", Namespace="http://schemas.datacontract.org/2004/07/EnSpireAssayInterface")]
    public partial class Assay : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrentState", Namespace="http://schemas.datacontract.org/2004/07/EnSpireAssayInterface")]
    public enum CurrentState : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csConnectingInstrument = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csInitializing = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csIdle = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csLoadingPlate = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csUnloadingPlate = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csMeasuringReference = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csMeasuring = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csShaking = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csWaiting = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csPaused = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csWaitingForPlate = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csSaving = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csCoverLidOpen = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csSideLidOpen = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csScanningFilters = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csShuttingDown = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csRestack = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csStopped = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csDispensing = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csDispMeasuring = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csBackground = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csDispMaintenance = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csWaitingTemperature = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csResetStacker = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        csNone = 65535,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BarcodeData", Namespace="http://schemas.datacontract.org/2004/07/EnSpireAssayInterface")]
    public partial class BarcodeData : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ErrorAction", Namespace="http://schemas.datacontract.org/2004/07/EnSpireAssayInterface")]
    public enum ErrorAction : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Abort = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Retry = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ignore = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yes = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        No = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cancel = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 64,
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://PerkinElmer.com/V4", ConfigurationName="EnSpireAssayService", CallbackContract=typeof(EnSpireAssayServiceCallback))]
public interface EnSpireAssayService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_StackerState", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_StackerStateResponse")]
    EnSpireAssayInterface.StackerState get_StackerState();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_StackerState", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_StackerStateResponse")]
    System.Threading.Tasks.Task<EnSpireAssayInterface.StackerState> get_StackerStateAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/SubscribeEvents", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/SubscribeEventsResponse")]
    bool SubscribeEvents();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/SubscribeEvents", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/SubscribeEventsResponse")]
    System.Threading.Tasks.Task<bool> SubscribeEventsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/UnSubscribeEvents", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/UnSubscribeEventsResponse")]
    bool UnSubscribeEvents();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/UnSubscribeEvents", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/UnSubscribeEventsResponse")]
    System.Threading.Tasks.Task<bool> UnSubscribeEventsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/StartTimer", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/StartTimerResponse")]
    void StartTimer();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/StartTimer", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/StartTimerResponse")]
    System.Threading.Tasks.Task StartTimerAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/StopTimer", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/StopTimerResponse")]
    void StopTimer();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/StopTimer", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/StopTimerResponse")]
    System.Threading.Tasks.Task StopTimerAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/LoadPlate", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/LoadPlateResponse")]
    bool LoadPlate(string barcode);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/LoadPlate", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/LoadPlateResponse")]
    System.Threading.Tasks.Task<bool> LoadPlateAsync(string barcode);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/DispenserParamsChanged")]
    void DispenserParamsChanged();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/DispenserParamsChanged")]
    System.Threading.Tasks.Task DispenserParamsChangedAsync();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/RegistryValuesChanged")]
    void RegistryValuesChanged();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/RegistryValuesChanged")]
    System.Threading.Tasks.Task RegistryValuesChangedAsync();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/Shutdown")]
    void Shutdown(bool clientsonly);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/Shutdown")]
    System.Threading.Tasks.Task ShutdownAsync(bool clientsonly);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/StartAssay")]
    void StartAssay(int assayprotid);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/StartAssay")]
    System.Threading.Tasks.Task StartAssayAsync(int assayprotid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/UnloadPlate", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/UnloadPlateResponse")]
    bool UnloadPlate();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/UnloadPlate", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/UnloadPlateResponse")]
    System.Threading.Tasks.Task<bool> UnloadPlateAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/set_Interval", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/set_IntervalResponse")]
    void set_Interval(int value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/set_Interval", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/set_IntervalResponse")]
    System.Threading.Tasks.Task set_IntervalAsync(int value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_IsOneShot", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_IsOneShotResponse")]
    bool get_IsOneShot();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_IsOneShot", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_IsOneShotResponse")]
    System.Threading.Tasks.Task<bool> get_IsOneShotAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/set_IsOneShot", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/set_IsOneShotResponse")]
    void set_IsOneShot(bool value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/set_IsOneShot", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/set_IsOneShotResponse")]
    System.Threading.Tasks.Task set_IsOneShotAsync(bool value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_AllowUnloadPlate", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_AllowUnloadPlateResponse")]
    bool get_AllowUnloadPlate();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_AllowUnloadPlate", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_AllowUnloadPlateResponse")]
    System.Threading.Tasks.Task<bool> get_AllowUnloadPlateAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/set_AllowUnloadPlate", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/set_AllowUnloadPlateResponse")]
    void set_AllowUnloadPlate(bool value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/set_AllowUnloadPlate", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/set_AllowUnloadPlateResponse")]
    System.Threading.Tasks.Task set_AllowUnloadPlateAsync(bool value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_Aperture", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_ApertureResponse")]
    string get_Aperture();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_Aperture", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_ApertureResponse")]
    System.Threading.Tasks.Task<string> get_ApertureAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_Assays", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_AssaysResponse")]
    EnSpireAssayInterface.Assay[] get_Assays();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_Assays", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_AssaysResponse")]
    System.Threading.Tasks.Task<EnSpireAssayInterface.Assay[]> get_AssaysAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_CurrentState", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_CurrentStateResponse")]
    EnSpireAssayInterface.CurrentState get_CurrentState();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_CurrentState", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_CurrentStateResponse")]
    System.Threading.Tasks.Task<EnSpireAssayInterface.CurrentState> get_CurrentStateAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_DispenserState", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_DispenserStateResponse")]
    int get_DispenserState();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_DispenserState", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_DispenserStateResponse")]
    System.Threading.Tasks.Task<int> get_DispenserStateAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_ExcFilterBarcodes", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_ExcFilterBarcodesResponse")]
    EnSpireAssayInterface.BarcodeData get_ExcFilterBarcodes();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_ExcFilterBarcodes", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_ExcFilterBarcodesResponse")]
    System.Threading.Tasks.Task<EnSpireAssayInterface.BarcodeData> get_ExcFilterBarcodesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_Humidity", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_HumidityResponse")]
    int get_Humidity();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_Humidity", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_HumidityResponse")]
    System.Threading.Tasks.Task<int> get_HumidityAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_InsideSensorTemperature", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_InsideSensorTemperatureResponse" +
        "")]
    int get_InsideSensorTemperature();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_InsideSensorTemperature", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_InsideSensorTemperatureResponse" +
        "")]
    System.Threading.Tasks.Task<int> get_InsideSensorTemperatureAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_InsideTemperature", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_InsideTemperatureResponse")]
    int get_InsideTemperature();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_InsideTemperature", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_InsideTemperatureResponse")]
    System.Threading.Tasks.Task<int> get_InsideTemperatureAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_InstrumentConfiguration", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_InstrumentConfigurationResponse" +
        "")]
    int get_InstrumentConfiguration();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_InstrumentConfiguration", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_InstrumentConfigurationResponse" +
        "")]
    System.Threading.Tasks.Task<int> get_InstrumentConfigurationAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_InstrumentState", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_InstrumentStateResponse")]
    int get_InstrumentState();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_InstrumentState", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_InstrumentStateResponse")]
    System.Threading.Tasks.Task<int> get_InstrumentStateAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_IsInstrumentConnected", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_IsInstrumentConnectedResponse")]
    bool get_IsInstrumentConnected();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_IsInstrumentConnected", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_IsInstrumentConnectedResponse")]
    System.Threading.Tasks.Task<bool> get_IsInstrumentConnectedAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_IsPlateLoaded", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_IsPlateLoadedResponse")]
    bool get_IsPlateLoaded();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_IsPlateLoaded", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_IsPlateLoadedResponse")]
    System.Threading.Tasks.Task<bool> get_IsPlateLoadedAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_LowerSensor", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_LowerSensorResponse")]
    int get_LowerSensor();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_LowerSensor", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_LowerSensorResponse")]
    System.Threading.Tasks.Task<int> get_LowerSensorAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_OutsideTemperature", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_OutsideTemperatureResponse")]
    int get_OutsideTemperature();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_OutsideTemperature", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_OutsideTemperatureResponse")]
    System.Threading.Tasks.Task<int> get_OutsideTemperatureAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_PlateBarcode", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_PlateBarcodeResponse")]
    string get_PlateBarcode();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_PlateBarcode", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_PlateBarcodeResponse")]
    System.Threading.Tasks.Task<string> get_PlateBarcodeAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_SerialNumber", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_SerialNumberResponse")]
    int get_SerialNumber();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/get_SerialNumber", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/get_SerialNumberResponse")]
    System.Threading.Tasks.Task<int> get_SerialNumberAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/set_SimulationMode", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/set_SimulationModeResponse")]
    void set_SimulationMode(bool value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireAssayService/set_SimulationMode", ReplyAction="http://PerkinElmer.com/V4/EnSpireAssayService/set_SimulationModeResponse")]
    System.Threading.Tasks.Task set_SimulationModeAsync(bool value);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface EnSpireAssayServiceCallback
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnTimerElapsed")]
    void OnTimerElapsed(int ticks);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnApertureRead")]
    void OnApertureRead(string apertureid);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnAssayContinued")]
    void OnAssayContinued(int assayId);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnAssayDone")]
    void OnAssayDone(int assayid);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnAssayExportDone")]
    void OnAssayExportDone(int assayid);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnAssayPaused")]
    void OnAssayPaused(int assayid);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnAssaySaved")]
    void OnAssaySaved(int assayid);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnAssayStarted")]
    void OnAssayStarted(int assayid);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnCurrentStateChanged")]
    void OnCurrentStateChanged(EnSpireAssayInterface.CurrentState newstate);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnError")]
    void OnError(string source, int number, string description, int choices, EnSpireAssayInterface.ErrorAction erroraction);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnExcFilterBarcodesRead")]
    void OnExcFilterBarcodesRead();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnExportDone")]
    void OnExportDone(int assayid, int plateid, string exportfilenames);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnInitDone")]
    void OnInitDone(bool isinstrumentconnected);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnInstrumentServerConnected")]
    void OnInstrumentServerConnected(bool connected);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnInstrumentStateChanged")]
    void OnInstrumentStateChanged(int newstate);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnPlateBarcodeRead")]
    void OnPlateBarcodeRead(string barcode, bool acknowledge);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnPlateLoaded")]
    void OnPlateLoaded(string barcode, int height, int maxheight);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnPlateUnloaded")]
    void OnPlateUnloaded();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnShakeBegin")]
    void OnShakeBegin(int shaketime);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnShakeEnd")]
    void OnShakeEnd();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnShutdown")]
    void OnShutdown();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnTemperatureMeasured")]
    void OnTemperatureMeasured(int insidetemperature, int outsidetemperature, int humidity);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnTemperatureUpdated")]
    void OnTemperatureUpdated(int inside, int outside, int humidity, int uppersensor, int lowersensor, int pwmplatewarmer, int pwmxywarmer, int pwmplatecooler, int insidesensor);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnWaitBegin")]
    void OnWaitBegin(int waittime);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnWaitEnd")]
    void OnWaitEnd();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireAssayService/OnAssayError")]
    void OnAssayError(string Source, int Number, string Description, int Choices, EnSpireAssayInterface.ErrorAction Action);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface EnSpireAssayServiceChannel : EnSpireAssayService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class EnSpireAssayServiceClient : System.ServiceModel.DuplexClientBase<EnSpireAssayService>, EnSpireAssayService
{
    
    public EnSpireAssayServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
            base(callbackInstance)
    {
    }
    
    public EnSpireAssayServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
            base(callbackInstance, endpointConfigurationName)
    {
    }
    
    public EnSpireAssayServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public EnSpireAssayServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public EnSpireAssayServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, binding, remoteAddress)
    {
    }
    
    public EnSpireAssayInterface.StackerState get_StackerState()
    {
        return base.Channel.get_StackerState();
    }
    
    public System.Threading.Tasks.Task<EnSpireAssayInterface.StackerState> get_StackerStateAsync()
    {
        return base.Channel.get_StackerStateAsync();
    }
    
    public bool SubscribeEvents()
    {
        return base.Channel.SubscribeEvents();
    }
    
    public System.Threading.Tasks.Task<bool> SubscribeEventsAsync()
    {
        return base.Channel.SubscribeEventsAsync();
    }
    
    public bool UnSubscribeEvents()
    {
        return base.Channel.UnSubscribeEvents();
    }
    
    public System.Threading.Tasks.Task<bool> UnSubscribeEventsAsync()
    {
        return base.Channel.UnSubscribeEventsAsync();
    }
    
    public void StartTimer()
    {
        base.Channel.StartTimer();
    }
    
    public System.Threading.Tasks.Task StartTimerAsync()
    {
        return base.Channel.StartTimerAsync();
    }
    
    public void StopTimer()
    {
        base.Channel.StopTimer();
    }
    
    public System.Threading.Tasks.Task StopTimerAsync()
    {
        return base.Channel.StopTimerAsync();
    }
    
    public bool LoadPlate(string barcode)
    {
        return base.Channel.LoadPlate(barcode);
    }
    
    public System.Threading.Tasks.Task<bool> LoadPlateAsync(string barcode)
    {
        return base.Channel.LoadPlateAsync(barcode);
    }
    
    public void DispenserParamsChanged()
    {
        base.Channel.DispenserParamsChanged();
    }
    
    public System.Threading.Tasks.Task DispenserParamsChangedAsync()
    {
        return base.Channel.DispenserParamsChangedAsync();
    }
    
    public void RegistryValuesChanged()
    {
        base.Channel.RegistryValuesChanged();
    }
    
    public System.Threading.Tasks.Task RegistryValuesChangedAsync()
    {
        return base.Channel.RegistryValuesChangedAsync();
    }
    
    public void Shutdown(bool clientsonly)
    {
        base.Channel.Shutdown(clientsonly);
    }
    
    public System.Threading.Tasks.Task ShutdownAsync(bool clientsonly)
    {
        return base.Channel.ShutdownAsync(clientsonly);
    }
    
    public void StartAssay(int assayprotid)
    {
        base.Channel.StartAssay(assayprotid);
    }
    
    public System.Threading.Tasks.Task StartAssayAsync(int assayprotid)
    {
        return base.Channel.StartAssayAsync(assayprotid);
    }
    
    public bool UnloadPlate()
    {
        return base.Channel.UnloadPlate();
    }
    
    public System.Threading.Tasks.Task<bool> UnloadPlateAsync()
    {
        return base.Channel.UnloadPlateAsync();
    }
    
    public void set_Interval(int value)
    {
        base.Channel.set_Interval(value);
    }
    
    public System.Threading.Tasks.Task set_IntervalAsync(int value)
    {
        return base.Channel.set_IntervalAsync(value);
    }
    
    public bool get_IsOneShot()
    {
        return base.Channel.get_IsOneShot();
    }
    
    public System.Threading.Tasks.Task<bool> get_IsOneShotAsync()
    {
        return base.Channel.get_IsOneShotAsync();
    }
    
    public void set_IsOneShot(bool value)
    {
        base.Channel.set_IsOneShot(value);
    }
    
    public System.Threading.Tasks.Task set_IsOneShotAsync(bool value)
    {
        return base.Channel.set_IsOneShotAsync(value);
    }
    
    public bool get_AllowUnloadPlate()
    {
        return base.Channel.get_AllowUnloadPlate();
    }
    
    public System.Threading.Tasks.Task<bool> get_AllowUnloadPlateAsync()
    {
        return base.Channel.get_AllowUnloadPlateAsync();
    }
    
    public void set_AllowUnloadPlate(bool value)
    {
        base.Channel.set_AllowUnloadPlate(value);
    }
    
    public System.Threading.Tasks.Task set_AllowUnloadPlateAsync(bool value)
    {
        return base.Channel.set_AllowUnloadPlateAsync(value);
    }
    
    public string get_Aperture()
    {
        return base.Channel.get_Aperture();
    }
    
    public System.Threading.Tasks.Task<string> get_ApertureAsync()
    {
        return base.Channel.get_ApertureAsync();
    }
    
    public EnSpireAssayInterface.Assay[] get_Assays()
    {
        return base.Channel.get_Assays();
    }
    
    public System.Threading.Tasks.Task<EnSpireAssayInterface.Assay[]> get_AssaysAsync()
    {
        return base.Channel.get_AssaysAsync();
    }
    
    public EnSpireAssayInterface.CurrentState get_CurrentState()
    {
        return base.Channel.get_CurrentState();
    }
    
    public System.Threading.Tasks.Task<EnSpireAssayInterface.CurrentState> get_CurrentStateAsync()
    {
        return base.Channel.get_CurrentStateAsync();
    }
    
    public int get_DispenserState()
    {
        return base.Channel.get_DispenserState();
    }
    
    public System.Threading.Tasks.Task<int> get_DispenserStateAsync()
    {
        return base.Channel.get_DispenserStateAsync();
    }
    
    public EnSpireAssayInterface.BarcodeData get_ExcFilterBarcodes()
    {
        return base.Channel.get_ExcFilterBarcodes();
    }
    
    public System.Threading.Tasks.Task<EnSpireAssayInterface.BarcodeData> get_ExcFilterBarcodesAsync()
    {
        return base.Channel.get_ExcFilterBarcodesAsync();
    }
    
    public int get_Humidity()
    {
        return base.Channel.get_Humidity();
    }
    
    public System.Threading.Tasks.Task<int> get_HumidityAsync()
    {
        return base.Channel.get_HumidityAsync();
    }
    
    public int get_InsideSensorTemperature()
    {
        return base.Channel.get_InsideSensorTemperature();
    }
    
    public System.Threading.Tasks.Task<int> get_InsideSensorTemperatureAsync()
    {
        return base.Channel.get_InsideSensorTemperatureAsync();
    }
    
    public int get_InsideTemperature()
    {
        return base.Channel.get_InsideTemperature();
    }
    
    public System.Threading.Tasks.Task<int> get_InsideTemperatureAsync()
    {
        return base.Channel.get_InsideTemperatureAsync();
    }
    
    public int get_InstrumentConfiguration()
    {
        return base.Channel.get_InstrumentConfiguration();
    }
    
    public System.Threading.Tasks.Task<int> get_InstrumentConfigurationAsync()
    {
        return base.Channel.get_InstrumentConfigurationAsync();
    }
    
    public int get_InstrumentState()
    {
        return base.Channel.get_InstrumentState();
    }
    
    public System.Threading.Tasks.Task<int> get_InstrumentStateAsync()
    {
        return base.Channel.get_InstrumentStateAsync();
    }
    
    public bool get_IsInstrumentConnected()
    {
        return base.Channel.get_IsInstrumentConnected();
    }
    
    public System.Threading.Tasks.Task<bool> get_IsInstrumentConnectedAsync()
    {
        return base.Channel.get_IsInstrumentConnectedAsync();
    }
    
    public bool get_IsPlateLoaded()
    {
        return base.Channel.get_IsPlateLoaded();
    }
    
    public System.Threading.Tasks.Task<bool> get_IsPlateLoadedAsync()
    {
        return base.Channel.get_IsPlateLoadedAsync();
    }
    
    public int get_LowerSensor()
    {
        return base.Channel.get_LowerSensor();
    }
    
    public System.Threading.Tasks.Task<int> get_LowerSensorAsync()
    {
        return base.Channel.get_LowerSensorAsync();
    }
    
    public int get_OutsideTemperature()
    {
        return base.Channel.get_OutsideTemperature();
    }
    
    public System.Threading.Tasks.Task<int> get_OutsideTemperatureAsync()
    {
        return base.Channel.get_OutsideTemperatureAsync();
    }
    
    public string get_PlateBarcode()
    {
        return base.Channel.get_PlateBarcode();
    }
    
    public System.Threading.Tasks.Task<string> get_PlateBarcodeAsync()
    {
        return base.Channel.get_PlateBarcodeAsync();
    }
    
    public int get_SerialNumber()
    {
        return base.Channel.get_SerialNumber();
    }
    
    public System.Threading.Tasks.Task<int> get_SerialNumberAsync()
    {
        return base.Channel.get_SerialNumberAsync();
    }
    
    public void set_SimulationMode(bool value)
    {
        base.Channel.set_SimulationMode(value);
    }
    
    public System.Threading.Tasks.Task set_SimulationModeAsync(bool value)
    {
        return base.Channel.set_SimulationModeAsync(value);
    }
}
