//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EnspireWebClient.DataService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidAssayProtocol", Namespace="http://schemas.datacontract.org/2004/07/EnSpireDataInterface")]
    [System.SerializableAttribute()]
    public partial class ValidAssayProtocol : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AssayProtocolIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtocolNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AssayProtocolID {
            get {
                return this.AssayProtocolIDField;
            }
            set {
                if ((this.AssayProtocolIDField.Equals(value) != true)) {
                    this.AssayProtocolIDField = value;
                    this.RaisePropertyChanged("AssayProtocolID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtocolName {
            get {
                return this.ProtocolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolNameField, value) != true)) {
                    this.ProtocolNameField = value;
                    this.RaisePropertyChanged("ProtocolName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://PerkinElmer.com/V4", ConfigurationName="DataService.EnSpireDataService")]
    public interface EnSpireDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireDataService/GetValidProtocols", ReplyAction="http://PerkinElmer.com/V4/EnSpireDataService/GetValidProtocolsResponse")]
        EnspireWebClient.DataService.ValidAssayProtocol[] GetValidProtocols(int level);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://PerkinElmer.com/V4/EnSpireDataService/GetValidProtocols", ReplyAction="http://PerkinElmer.com/V4/EnSpireDataService/GetValidProtocolsResponse")]
        System.Threading.Tasks.Task<EnspireWebClient.DataService.ValidAssayProtocol[]> GetValidProtocolsAsync(int level);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireDataService/RefreshProtocols")]
        void RefreshProtocols();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://PerkinElmer.com/V4/EnSpireDataService/RefreshProtocols")]
        System.Threading.Tasks.Task RefreshProtocolsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface EnSpireDataServiceChannel : EnspireWebClient.DataService.EnSpireDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EnSpireDataServiceClient : System.ServiceModel.ClientBase<EnspireWebClient.DataService.EnSpireDataService>, EnspireWebClient.DataService.EnSpireDataService {
        
        public EnSpireDataServiceClient() {
        }
        
        public EnSpireDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EnSpireDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EnSpireDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EnSpireDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EnspireWebClient.DataService.ValidAssayProtocol[] GetValidProtocols(int level) {
            return base.Channel.GetValidProtocols(level);
        }
        
        public System.Threading.Tasks.Task<EnspireWebClient.DataService.ValidAssayProtocol[]> GetValidProtocolsAsync(int level) {
            return base.Channel.GetValidProtocolsAsync(level);
        }
        
        public void RefreshProtocols() {
            base.Channel.RefreshProtocols();
        }
        
        public System.Threading.Tasks.Task RefreshProtocolsAsync() {
            return base.Channel.RefreshProtocolsAsync();
        }
    }
}
